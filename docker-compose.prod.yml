services:
  web:
    image: ${IMAGE_REF}
    environment:
      FLASK_ENV: production
    expose:
      - "5000"
    restart: unless-stopped

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile.waf
    depends_on: [ web ]
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
      # Splunk HEC (Secrets/ENV에서 주입)
      SPLUNK_HEC_URL: ${SPLUNK_HEC_URL}                   # 예) https://127.0.0.1:8088 (역SSH 터널)
      SPLUNK_HEC_TOKEN: ${SPLUNK_HEC_TOKEN}               # 필수
      SPLUNK_HEC_INDEX: ${SPLUNK_HEC_INDEX:-waf}
      SPLUNK_HEC_SOURCETYPE: ${SPLUNK_HEC_SOURCETYPE:-waf}
      SPLUNK_HEC_SOURCE: ${SPLUNK_HEC_SOURCE:-http:GCE_WAF}
      SPLUNK_HEC_INSECURE: ${SPLUNK_HEC_INSECURE:-"true"} # 신뢰된 인증서로 HEC면 "false"
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      # 파일 로그도 남길 거면 아래 추가(선택)
      # - ./nginx/logs:/var/log/nginx
      # - ./nginx/modsec-logs:/var/log/modsecurity
    entrypoint:
    - sh
    - -euxc
    - |
      # 0) modsecurity.conf에서 CRS 관련 Include/IncludeOptional 전부 제거(대소문자 무시)
      awk 'BEGIN{IGNORECASE=1}
          !($1 ~ /^Include(Optional)?$/ && ($0 ~ /(modsecurity[-_]crs|coreruleset|owasp-crs|crs-setup\.conf|rules\/.*\.conf)/)) {print}
          ' /etc/modsecurity/modsecurity.conf > /tmp/modsec.clean && mv /tmp/modsec.clean /etc/modsecurity/modsecurity.conf

      # 0-a) SecDefaultAction 중복 방지: modsecurity.conf의 SecDefaultAction 제거(대소문자 무시)
      sed -ri '/^[[:space:]]*SecDefaultAction(s)?\b/Id' /etc/modsecurity/modsecurity.conf || true

      # 0-b) crs-setup.conf 표준 경로 보장
      mkdir -p /etc/modsecurity/crs
      [ -f /usr/share/modsecurity-crs/crs-setup.conf ] && ln -sf /usr/share/modsecurity-crs/crs-setup.conf /etc/modsecurity/crs/crs-setup.conf

      # 0-c) main.conf를 owasp-crs.load로 "한 번만" 로드(따옴표 없음)
      cat >/etc/nginx/modsec/main.conf <<'EOF'
      Include /etc/modsecurity/modsecurity.conf
      Include /etc/modsecurity/crs/crs-setup.conf
      Include /usr/share/modsecurity-crs/owasp-crs.load
      EOF

      # 0-d) CRS rules 디렉토리 보강(없으면 내려받기)
      if [ ! -d /usr/share/modsecurity-crs/rules ]; then
        echo "CRS rules dir missing; fetching v4.5.0..."
        mkdir -p /usr/share/modsecurity-crs
        curl -fsSL https://github.com/coreruleset/coreruleset/archive/refs/tags/v4.5.0.tar.gz \
          | tar -xz -C /usr/share/modsecurity-crs --strip-components=1
      fi

      # 1) 템플릿 → 실제 Nginx conf 생성
      envsubst '$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf

      # 2) 감사로그를 stderr로 전환 + 엔진 On 보정
      if grep -qE '^[[:space:]]*SecAuditLog[[:space:]]+' /etc/modsecurity/modsecurity.conf; then
        sed -ri 's|^[[:space:]]*SecAuditLog[[:space:]]+.*|SecAuditLog /dev/stderr|' /etc/modsecurity/modsecurity.conf
      else
        printf '\nSecAuditLog /dev/stderr\n' >> /etc/modsecurity/modsecurity.conf
      fi
      sed -ri 's/SecRuleEngine[[:space:]]+DetectionOnly/SecRuleEngine On/i' /etc/modsecurity/modsecurity.conf || true

      # (옵션) 네 임계치 정책을 로컬 정책으로 분리해 끝에 포함
      cat >/etc/modsecurity/local-policies.conf <<'EOP'
      SecAction "id:900110,phase:1,nolog,pass,\
      setvar:tx.anomaly_score_blocking=on,\
      setvar:tx.inbound_anomaly_score_threshold=5,\
      setvar:tx.outbound_anomaly_score_threshold=4"
      EOP
      echo 'Include /etc/modsecurity/local-policies.conf' >> /etc/nginx/modsec/main.conf

      # (디버그) 실제 Include/기본액션 확인
      echo "=== Includes in modsecurity.conf ==="
      grep -nEi '^[[:space:]]*Include' /etc/modsecurity/modsecurity.conf || true
      echo "=== SecDefaultAction lines (should be empty) ==="
      grep -nEi '^[[:space:]]*SecDefaultAction' /etc/modsecurity/modsecurity.conf || true
      echo "=== /etc/nginx/modsec/main.conf ==="
      cat /etc/nginx/modsec/main.conf

      # 3) 문법 검사 후 기동
      nginx -t
      exec nginx -g 'daemon off;'



    logging:
      driver: splunk
      options:
        splunk-url: ${SPLUNK_HEC_URL}
        splunk-token: ${SPLUNK_HEC_TOKEN}
        splunk-index: ${SPLUNK_HEC_INDEX}
        splunk-sourcetype: ${SPLUNK_HEC_SOURCETYPE}
        splunk-source: ${SPLUNK_HEC_SOURCE}
        splunk-gzip: "true"
        splunk-insecureskipverify: ${SPLUNK_HEC_INSECURE}
        tag: "{{.Name}}"
        labels: "com.docker.compose.project,com.docker.compose.service"
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    command:
      - certonly
      - --webroot
      - --webroot-path=/var/www/certbot
      - --non-interactive
      - --agree-tos
      - --email
      - "${LETSENCRYPT_EMAIL}"
      - -d
      - "${DOMAIN}"
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: "no"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: >
      sh -c "while true; do
               certbot renew --quiet --deploy-hook 'docker exec nginx nginx -s reload';
               sleep 12h;
             done"
    restart: unless-stopped
