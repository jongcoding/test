services:
  web:
    image: ${IMAGE_REF}
    environment:
      FLASK_ENV: production
    expose: [ "5000" ]
    restart: unless-stopped

    nginx:
      container_name: nginx
      build:
        context: ./nginx
        dockerfile: Dockerfile.waf
      depends_on: [ web ]
      ports: [ "80:80", "443:443" ]
      environment:
        DOMAIN: ${DOMAIN}

        # === Splunk HEC (Secrets/.env로 주입) ===
        SPLUNK_HEC_URL: ${SPLUNK_HEC_URL}                   # 예: https://127.0.0.1:8088
        SPLUNK_HEC_TOKEN: ${SPLUNK_HEC_TOKEN}               # 필수
        SPLUNK_HEC_INDEX: ${SPLUNK_HEC_INDEX:-waf}
        SPLUNK_HEC_SOURCETYPE: ${SPLUNK_HEC_SOURCETYPE:-waf}
        SPLUNK_HEC_SOURCE: ${SPLUNK_HEC_SOURCE:-http:GCE_WAF}
        SPLUNK_HEC_INSECURE: ${SPLUNK_HEC_INSECURE:-"true"} # 자체서명 테스트면 "true"
      volumes:
        - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
        - ./certbot/config:/etc/letsencrypt
        - ./certbot/www:/var/www/certbot
        - ./nginx/logs:/var/log/nginx
        - ./nginx/modsec-logs:/var/log/modsecurity
      entrypoint:
        - sh
        - -euxc
        - |
          # 0) modsecurity.conf 안의 CRS 관련 Include 전부 제거(대소문자 무시)
          awk 'BEGIN{IGNORECASE=1}
              !($1 ~ /^Include(Optional)?$/ && ($0 ~ /(coreruleset|modsecurity[-_]crs|owasp-crs|crs-setup\.conf|rules\/.*\.conf)/)) {print}
              ' /etc/modsecurity/modsecurity.conf > /tmp/mod.conf && mv /tmp/mod.conf /etc/modsecurity/modsecurity.conf

          # 0-a) SecDefaultAction 충돌 방지: 기본값 삭제
          sed -ri '/^[[:space:]]*SecDefaultAction(s)?\b/Id' /etc/modsecurity/modsecurity.conf || true

          # 0-b) main.conf를 "단 한 번"만 로드되도록 생성
          CRS_LOAD="/usr/share/modsecurity-crs/owasp-crs.load"
          if [ -f "$CRS_LOAD" ] && grep -qi 'crs-setup\.conf' "$CRS_LOAD"; then
            # owasp-crs.load 안에 setup 포함 → 중복 방지 위해 setup 별도 include 금지
            printf '%s\n' \
              'Include /etc/modsecurity/modsecurity.conf' \
              'Include /usr/share/modsecurity-crs/owasp-crs.load' \
              > /etc/nginx/modsec/main.conf
          else
            # 일반 패키지: setup + rules/*.conf 조합
            printf '%s\n' \
              'Include /etc/modsecurity/modsecurity.conf' \
              'Include /usr/share/modsecurity-crs/crs-setup.conf' \
              'Include /usr/share/modsecurity-crs/rules/*.conf' \
              > /etc/nginx/modsec/main.conf
          fi
          # 혹시 따옴표가 있다면 제거
          sed -ri 's|^([[:space:]]*Include)[[:space:]]+"([^"]+)"|\1 \2|' /etc/nginx/modsec/main.conf

          # 1) 감사로그를 stderr로 전환(HEC로 수집)
          if grep -qE '^[[:space:]]*SecAuditLog[[:space:]]+' /etc/modsecurity/modsecurity.conf; then
            sed -ri 's|^[[:space:]]*SecAuditLog[[:space:]]+.*|SecAuditLog /dev/stderr|' /etc/modsecurity/modsecurity.conf
          else
            printf '\nSecAuditLog /dev/stderr\n' >> /etc/modsecurity/modsecurity.conf
          fi

          # 2) Nginx conf 생성 후 기동
          envsubst '$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf
          nginx -t
          exec nginx -g 'daemon off;'
      logging:
        driver: splunk
        options:
          splunk-url: ${SPLUNK_HEC_URL}
          splunk-token: ${SPLUNK_HEC_TOKEN}
          splunk-index: ${SPLUNK_HEC_INDEX}
          splunk-sourcetype: ${SPLUNK_HEC_SOURCETYPE}
          splunk-source: ${SPLUNK_HEC_SOURCE}
          splunk-gzip: "true"
          splunk-insecureskipverify: ${SPLUNK_HEC_INSECURE}
          tag: "{{.Name}}"
          labels: "com.docker.compose.project,com.docker.compose.service"
      restart: unless-stopped


  certbot:
    image: certbot/certbot
    command:
      - certonly
      - --webroot
      - --webroot-path=/var/www/certbot
      - --non-interactive
      - --agree-tos
      - --email
      - "${LETSENCRYPT_EMAIL}"
      - -d
      - "${DOMAIN}"
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: "no"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: >
      sh -c "while true; do
               certbot renew --quiet --deploy-hook 'docker exec nginx nginx -s reload';
               sleep 12h;
             done"
    restart: unless-stopped
