services:
  web:
    image: ${IMAGE_REF}
    environment:
      FLASK_ENV: production
    expose:
      - "5000"
    restart: unless-stopped

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile.waf
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
      # ↓ CD/Secrets에서 주입
      SPLUNK_HEC_URL: ${SPLUNK_HEC_URL}                   # 예) https://127.0.0.1:8088 (역SSH 터널)
      SPLUNK_HEC_TOKEN: ${SPLUNK_HEC_TOKEN}               # 필수
      SPLUNK_HEC_INDEX: ${SPLUNK_HEC_INDEX:-waf}
      SPLUNK_HEC_SOURCETYPE: ${SPLUNK_HEC_SOURCETYPE:-waf}
      SPLUNK_HEC_SOURCE: ${SPLUNK_HEC_SOURCE:-http:GCE_WAF}
      SPLUNK_HEC_INSECURE: ${SPLUNK_HEC_INSECURE:-"true"} # 신뢰된 인증서면 "false"
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      # 파일 로그가 필요 없으면 아래 두 줄은 생략 가능
      # - ./nginx/logs:/var/log/nginx
      # - ./nginx/modsec-logs:/var/log/modsecurity
    entrypoint:
      - sh
      - -euxc
      - |
        # 0) main.conf 내 Include의 큰따옴표 제거(로그의 원인) + CRS 디렉토리 보강
        if grep -qE '^Include\s+"[^"]+' /etc/nginx/modsec/main.conf 2>/dev/null; then
          sed -ri 's|^Include\s+"([^"]+)"|Include \1|' /etc/nginx/modsec/main.conf
        fi
        if [ ! -d /usr/share/modsecurity-crs/rules ]; then
          echo "CRS rules dir missing; fetching v4.5.0..."
          mkdir -p /usr/share/modsecurity-crs
          curl -fsSL https://github.com/coreruleset/coreruleset/archive/refs/tags/v4.5.0.tar.gz \
            | tar -xz -C /usr/share/modsecurity-crs --strip-components=1
        fi

        # 1) 템플릿 → 실제 conf 생성
        envsubst '$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf

        # 2) ModSecurity 감사로그를 stderr로 전환 (Splunk 로깅 드라이버가 수집)
        if grep -qE '^[[:space:]]*SecAuditLog[[:space:]]+' /etc/modsecurity/modsecurity.conf; then
          sed -ri 's|^[[:space:]]*SecAuditLog[[:space:]]+.*|SecAuditLog /dev/stderr|' /etc/modsecurity/modsecurity.conf
        else
          printf '\nSecAuditLog /dev/stderr\n' >> /etc/modsecurity/modsecurity.conf
        fi
        # DetectionOnly → On 보정(존재 시)
        sed -ri 's/SecRuleEngine[[:space:]]+DetectionOnly/SecRuleEngine On/i' /etc/modsecurity/modsecurity.conf || true

        # 3) 문법 확인 후 기동
        nginx -t
        exec nginx -g 'daemon off;'
    logging:
      driver: splunk
      options:
        splunk-url: ${SPLUNK_HEC_URL}
        splunk-token: ${SPLUNK_HEC_TOKEN}
        splunk-index: ${SPLUNK_HEC_INDEX}
        splunk-sourcetype: ${SPLUNK_HEC_SOURCETYPE}
        splunk-source: ${SPLUNK_HEC_SOURCE}
        splunk-gzip: "true"
        splunk-insecureskipverify: ${SPLUNK_HEC_INSECURE}
        tag: "{{.Name}}"
        labels: "com.docker.compose.project,com.docker.compose.service"
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    command:
      - certonly
      - --webroot
      - --webroot-path=/var/www/certbot
      - --non-interactive
      - --agree-tos
      - --email
      - "${LETSENCRYPT_EMAIL}"
      - -d
      - "${DOMAIN}"
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: "no"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: >
      sh -c "while true; do
               certbot renew --quiet --deploy-hook 'docker exec nginx nginx -s reload';
               sleep 12h;
             done"
    restart: unless-stopped
