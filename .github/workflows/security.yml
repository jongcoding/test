name: Security – SAST & SCA

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # SARIF 업로드용 권한

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Ensure jq (for SARIF checks)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # ────────────────────────────────────────────────────────────────────
      # Python tooling (Semgrep/Bandit/pip-audit)
      # ────────────────────────────────────────────────────────────────────
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install semgrep bandit pip-audit

      # ────────────────────────────────────────────────────────────────────
      # Semgrep (SAST)
      # ────────────────────────────────────────────────────────────────────
      - name: Semgrep (OWASP + Python)
        run: |
          set -euo pipefail
          semgrep ci --config p/owasp-top-ten --config p/python --sarif -o semgrep.sarif || true

      - name: Check Semgrep SARIF has results
        id: semgrep_sarif_check
        run: |
          if [ ! -s semgrep.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          runs=$(jq '.runs | length' semgrep.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' semgrep.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Semgrep SARIF
        if: ${{ steps.semgrep_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # ────────────────────────────────────────────────────────────────────
      # Bandit (Python SAST)
      # ────────────────────────────────────────────────────────────────────
      - name: Bandit
        run: |
          set -euo pipefail
          bandit -r . -f sarif -o bandit.sarif || true

      - name: Check Bandit SARIF has results
        id: bandit_sarif_check
        run: |
          if [ ! -s bandit.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          runs=$(jq '.runs | length' bandit.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' bandit.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Bandit SARIF
        if: ${{ steps.bandit_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      # ────────────────────────────────────────────────────────────────────
      # pip-audit (Python deps CVE) - 리포트 모드
      # ────────────────────────────────────────────────────────────────────
      - name: pip-audit
        run: |
          if [ -f requirements.txt ]; then
            # 처음엔 리포트만; 게이트 원하면 '|| true' 제거
            pip-audit -r requirements.txt --strict || true
          fi

      # ────────────────────────────────────────────────────────────────────
      # Hadolint (Dockerfile Lint) → SARIF 업로드
      # ────────────────────────────────────────────────────────────────────
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          args: --format sarif -o hadolint.sarif Dockerfile

      - name: Check Hadolint SARIF has results
        id: hadolint_sarif_check
        run: |
          if [ ! -s hadolint.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          runs=$(jq '.runs | length' hadolint.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' hadolint.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Hadolint SARIF
        if: ${{ steps.hadolint_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint.sarif

      # ────────────────────────────────────────────────────────────────────
      # Trivy (filesystem scan) → SARIF 업로드
      # ────────────────────────────────────────────────────────────────────
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-fs.sarif
          exit-code: '0'   # 게이트로 쓰려면 '1'

      - name: Check Trivy SARIF has results
        id: trivyfs_sarif_check
        run: |
          if [ ! -s trivy-fs.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          runs=$(jq '.runs | length' trivy-fs.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' trivy-fs.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Trivy SARIF
        if: ${{ steps.trivyfs_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # ────────────────────────────────────────────────────────────────────
      # Gitleaks (Secrets)
      # ────────────────────────────────────────────────────────────────────
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --verbose --redact --exit-code 1
