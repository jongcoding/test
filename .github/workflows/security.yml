name: Security – SAST & SCA
on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # SARIF 업로드용

    steps:
      - uses: actions/checkout@v4

      # Python 툴 설치 (Semgrep/Bandit/pip-audit)
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install security tooling
        run: |
          pip install --upgrade pip
          pip install semgrep bandit pip-audit

      # ── Semgrep (룰 기반 SAST) ───────────────────────────────────────────
      - name: Semgrep (OWASP + Python)
        run: |
          set -euo pipefail
          semgrep ci --config p/owasp-top-ten --config p/python --sarif -o semgrep.sarif || true
          # 빈 파일 대비 최소 SARIF 생성
          test -s semgrep.sarif || echo '{"version":"2.1.0","runs":[]}' > semgrep.sarif

      - name: Upload Semgrep SARIF
        if: ${{ hashFiles('semgrep.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # ── Bandit (Python SAST) ────────────────────────────────────────────
      - name: Bandit
        run: |
          set -euo pipefail
          bandit -r . -f sarif -o bandit.sarif || true
          test -s bandit.sarif || echo '{"version":"2.1.0","runs":[]}' > bandit.sarif

      - name: Upload Bandit SARIF
        if: ${{ hashFiles('bandit.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      # ── pip-audit (의존성 CVE) ──────────────────────────────────────────
      - name: pip-audit
        run: |
          if [ -f requirements.txt ]; then
            # 리포트만 (게이트로 쓰려면 --strict 유지, 실패해도 통과시키려면 || true 추가)
            pip-audit -r requirements.txt --strict || true
          fi

      # ── Hadolint (Dockerfile 린트) ───────────────────────────────────────
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          args: --format sarif -o hadolint.sarif Dockerfile

      - name: Upload Hadolint SARIF
        if: ${{ hashFiles('hadolint.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint.sarif

      # ── Trivy (소스 트리 SCA/SAST 유사) ─────────────────────────────────
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-fs.sarif
          exit-code: '0'   # 게이트로 쓰려면 '1'
      - name: Upload Trivy SARIF
        if: ${{ hashFiles('trivy-fs.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # ── Gitleaks (Secret 스캔) ──────────────────────────────────────────
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --verbose --redact --exit-code 1
