# .github/workflows/cd.yml
name: CD – Build, Push & Deploy to GCE

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  # 1) 이미지 빌드 & Docker Hub 푸시
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/myflask
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 이미지 빌드 & 푸시
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 2) GCE VM 배포 + 인증서 발급
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
      DOMAIN: ${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # SSH 준비
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Add GCE host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts
          if [ -n "${{ secrets.GCP_HOST_KEY }}" ]; then
            echo "${{ secrets.GCP_HOST_KEY }}" >> ~/.ssh/known_hosts
          fi

      # 연결 테스트
      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "echo 'SSH connection successful'"

      # 원격 폴더 구조 생성
      - name: Ensure remote directory structure
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "export REMOTE_APP_DIR='${{ secrets.REMOTE_APP_DIR }}' && \
             mkdir -p \"\$REMOTE_APP_DIR\" \"\$REMOTE_APP_DIR/nginx\" \
                      \"\$REMOTE_APP_DIR/certbot/config\" \"\$REMOTE_APP_DIR/certbot/www\" \
                      \"\$REMOTE_APP_DIR/certbot/logs\""

      # .env 파일 작성 (here-doc + 파이프 방식)
      - name: Write .env on VM
        run: |
          cat << 'DOTENV' | ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "bash -s"
          export REMOTE_APP_DIR='${{ secrets.REMOTE_APP_DIR }}'
          cat > "$REMOTE_APP_DIR/.env" << 'EOENV'
          DOMAIN=${{ secrets.DOMAIN }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          IMAGE_TAG=${{ github.sha }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          EOENV
          echo '.env file created successfully'
          ls -la "$REMOTE_APP_DIR/.env"
          DOTENV

      # 프로덕션용 Compose & Nginx 템플릿 전송
      - name: Copy production assets to VM
        run: |
          {
            echo "cat > '${{ secrets.REMOTE_APP_DIR }}/docker-compose.prod.yml' << 'COMPOSE_EOF'"
            cat docker-compose.prod.yml
            echo "COMPOSE_EOF"
            echo "cat > '${{ secrets.REMOTE_APP_DIR }}/nginx/default.conf.template' << 'NGINX_EOF'"
            cat nginx/default.conf.template
            echo "NGINX_EOF"
          } | ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} 'bash -s'

      # 기존 컨테이너 정리
      - name: Clean up old containers
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd \"\$REMOTE_APP_DIR\" && \
             docker compose -f docker-compose.prod.yml down --remove-orphans || true && \
             docker system prune -f --volumes || true"

      # ① Nginx + Web 선기동 (HTTP only)
      - name: Start nginx & web (HTTP only)
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd \"\$REMOTE_APP_DIR\" && \
             source .env && \
             docker compose -f docker-compose.prod.yml pull web nginx && \
             docker compose -f docker-compose.prod.yml up -d nginx web"

      # ② Port 80 연결 확인
      - name: Wait until port 80 is reachable
        run: |
          echo "Waiting for HTTP service..."
          for i in {1..24}; do
            if curl -sSf -m 10 http://${DOMAIN} >/dev/null; then
              echo "✅ HTTP ready"
              break
            fi
            sleep 5
          done

      # ③ SSL 인증서 발급
      - name: Issue / Renew SSL certificate
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "cd \"\$REMOTE_APP_DIR\" && \
             source .env && \
             certbot certonly --webroot -w /var/www/certbot \
             --email \${LETSENCRYPT_EMAIL} -d \${DOMAIN} \
             --agree-tos --non-interactive --keep-until-expiring && \
             docker exec nginx nginx -s reload"

      # ④ 최신 이미지 pull & 전체 재시작 (HTTPS 포함)
      - name: Deploy with latest images
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd \"\$REMOTE_APP_DIR\" && \
             source .env && \
             docker compose -f docker-compose.prod.yml pull && \
             docker compose -f docker-compose.prod.yml up -d --remove-orphans"

      # ⑤ 배포 후 상태 확인 (HTTPS)
      - name: Verify deployment
        run: |
          echo "Verifying HTTPS..."
          for i in {1..12}; do
            if curl -sSf -m 10 https://${DOMAIN} >/dev/null; then
              echo "✅ HTTPS ready"
              break
            fi
            sleep 10
          done

      # ⑥ 정리 작업
      - name: Cleanup old Docker images
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "docker image prune -f --filter 'until=24h' || true"

  # 3) 배포 알림 (선택사항)
  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send deployment notification
        if: success()
        run: echo "✅ Deployment to ${{ secrets.DOMAIN }} completed successfully!"
      - name: Send failure notification
        if: failure()
        run: echo "❌ Deployment to ${{ secrets.DOMAIN }} failed!"
