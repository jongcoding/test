# .github/workflows/cd.yml
name: CD â€“ Build, Push & Deploy to GCE

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myflask:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/myflask:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      REMOTE_APP_DIR:     ${{ secrets.REMOTE_APP_DIR }}
      DOMAIN:             ${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL:  ${{ secrets.LETSENCRYPT_EMAIL }}

    steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}
      - run: ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote dirs
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "mkdir -p ${REMOTE_APP_DIR} \
                      ${REMOTE_APP_DIR}/certbot/config \
                      ${REMOTE_APP_DIR}/certbot/www \
                      ${REMOTE_APP_DIR}/nginx"

      - name: Write .env
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "printf 'DOCKERHUB_USERNAME=%s\nDOMAIN=%s\nLETSENCRYPT_EMAIL=%s\n' \
              '${{ secrets.DOCKERHUB_USERNAME }}' '${{ secrets.DOMAIN }}' '${{ secrets.LETSENCRYPT_EMAIL }}' \
            > ${REMOTE_APP_DIR}/.env"

      - name: Copy compose files
        run: |
          scp -o StrictHostKeyChecking=no \
            docker-compose.yml \
            docker-compose.prod.yml \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:${{ env.REMOTE_APP_DIR }}/

      - name: Copy nginx template to VM
        run: |
          scp -o StrictHostKeyChecking=no \
            nginx/default.conf.template \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_APP_DIR }}/nginx/default.conf.template"

      - name: Start web & nginx
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd ${REMOTE_APP_DIR} && \
             docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d web nginx"

      - name: Issue/Renew SSL cert
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd ${REMOTE_APP_DIR} && \
             docker compose -f docker-compose.yml -f docker-compose.prod.yml run --rm certbot"

      - name: Pull & full up
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} \
            "cd ${REMOTE_APP_DIR} && \
             docker compose -f docker-compose.yml -f docker-compose.prod.yml pull && \
             docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans"
