name: CD â€“ Build, Push & Deploy to GCE

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/myflask:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/myflask:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      REMOTE_APP_DIR:     ${{ secrets.REMOTE_APP_DIR }}
      DOMAIN:             ${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL:  ${{ secrets.LETSENCRYPT_EMAIL }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Add GCE host to known_hosts
        run: ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote dirs exist
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "\
              mkdir -p ${{ env.REMOTE_APP_DIR }} \
                       ${{ env.REMOTE_APP_DIR }}/certbot/config \
                       ${{ env.REMOTE_APP_DIR }}/certbot/www \
                       ${{ env.REMOTE_APP_DIR }}/nginx"

      - name: Write .env on VM
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
            cat > ${{ env.REMOTE_APP_DIR }}/.env << EOL
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOMAIN=${{ secrets.DOMAIN }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOL
            EOF

      - name: Copy compose, nginx & certbot to VM
        run: |
          scp -r -o StrictHostKeyChecking=no \
            docker-compose.yml \
            docker-compose.prod.yml \
            nginx/default.conf.template \
            certbot/config \
            certbot/www \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:${{ env.REMOTE_APP_DIR }}/

      - name: Issue/Renew SSL certificates on VM
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
            cd ${{ env.REMOTE_APP_DIR }}
            docker compose -f docker-compose.prod.yml run --rm certbot
            EOF

      - name: Pull & restart on VM
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
            set -euo pipefail
            cd ${{ env.REMOTE_APP_DIR }}
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
                   DOMAIN=${{ secrets.DOMAIN }} \
                   LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
            EOF
