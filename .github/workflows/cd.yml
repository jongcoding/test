# .github/workflows/cd.yml
name: CD – Build, Push & Deploy to GCE

on:
  push:
    branches: [ main ]
    tags:     [ 'v*.*.*' ]

jobs:
  # 1) Build & Push ───────────────────────────────────────────
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag:    ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/myflask
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags:   ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max

  # 2) Deploy to GCE VM ───────────────────────────────────────
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      REMOTE_DIR:        ${{ secrets.REMOTE_APP_DIR }}
      DOMAIN:            ${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      IMAGE_TAG:         ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # ────── SSH 준비 ──────────────────────────────────────
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Add host key
        run: |
          ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
          if [ -n "${{ secrets.GCP_HOST_KEY }}" ]; then
            echo "${{ secrets.GCP_HOST_KEY }}" >> ~/.ssh/known_hosts
          fi

      - name: Test SSH
        run: ssh -o ConnectTimeout=10 ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "echo OK"

      # ────── ① 디렉터리 & .env 생성 ────────────────────────
      - name: Prepare app directory & .env
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} <<'EOF'
            mkdir -p "${{ env.REMOTE_DIR }}"/{nginx,certbot/{config,www,logs}}
            cat > "${{ env.REMOTE_DIR }}/.env" <<EOT
            DOMAIN=${{ env.DOMAIN }}
            LETSENCRYPT_EMAIL=${{ env.LETSENCRYPT_EMAIL }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            EOT
          EOF

      # ────── ② HTTP‑only 템플릿 & Compose 업로드 ─────────────
      - name: Upload HTTP‑only Nginx template + compose
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.http.conf.template \
              ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/nginx/default.conf.template"
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml \
              ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/"

      # ────── ③ 스택 기동(80) ────────────────────────────────
      - name: Start HTTP‑only stack
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml down --remove-orphans || true &&
            docker compose -f docker-compose.prod.yml up -d nginx web
          "

      # ────── ④ HTTP 응답 대기 ───────────────────────────────
      - name: Wait for HTTP
        run: |
          for i in {1..24}; do
            curl -sSf -m 5 http://${{ env.DOMAIN }} >/dev/null && echo 'HTTP OK' && break
            echo "...waiting HTTP ($i/24)"; sleep 5
          done

      # ────── ⑤ 인증서 발급/갱신 ─────────────────────────────
      - name: Issue / Renew SSL
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml run --rm certbot sh -c '
              set -e
              # 1) options-ssl-nginx.conf
              if [ ! -f /etc/letsencrypt/options-ssl-nginx.conf ]; then
                cp /usr/local/lib/python*/dist-packages/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf \
                  /etc/letsencrypt/
              fi
              # 2) ssl-dhparams.pem (없으면 생성)
              if [ ! -f /etc/letsencrypt/ssl-dhparams.pem ]; then
                openssl dhparam -out /etc/letsencrypt/ssl-dhparams.pem 4096
              fi
            '
          "

      # ────── ⑥ HTTPS 템플릿 업로드 ──────────────────────────
      - name: Upload HTTPS Nginx template
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.https.conf.template \
              ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:"${{ env.REMOTE_DIR }}/nginx/default.conf.template"

      # ────── ⑦ 컨테이너 내부에서 conf 재생성 & reload ───────
      - name: Apply HTTPS config & reload nginx
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml exec nginx sh -c \"
              envsubst '\\$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf &&
              nginx -s reload
            \"
          "

      # ────── ⑧ (선택) 전체 스택 최신화 ─────────────────────
      - name: Deploy latest stack
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "
            cd '${{ env.REMOTE_DIR }}' &&
            docker compose -f docker-compose.prod.yml pull &&
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
          "

      # ────── ⑨ HTTPS 검증 ───────────────────────────────────
      - name: Verify HTTPS
        run: |
          for i in {1..12}; do
            curl -sSf -m 5 https://${{ env.DOMAIN }} >/dev/null && echo 'HTTPS OK' && break
            echo "...waiting HTTPS ($i/12)"; sleep 10
          done

      # ────── ⑩ 오래된 이미지 정리 ───────────────────────────
      - name: Prune images
        run: |
          ssh ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} "docker image prune -f --filter 'until=24h' || true"

  # 3) Slack / 메일 등 알림(예시) ─────────────────────────────
  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Success notice
        if: success()
        run: echo "✅ Deployed to ${{ secrets.DOMAIN }}"
      - name: Failure notice
        if: failure()
        run: echo "❌ Deployment to ${{ secrets.DOMAIN }} failed"
