# .github/workflows/dast-after-cd.yml
name: Security – DAST (ZAP after CD)

on:
  # CD 워크플로우가 "성공적으로" 끝나면 트리거
  workflow_run:
    workflows: ["CD – Build, Push & Deploy to GCE"]
    types: [completed]

  # 수동/주기 실행도 허용
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1"   # 매주 월요일 00:00 UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  zap_scan:
    # workflow_run일 때는 성공(conclusion == success)인 경우에만 실행
    if: >
      github.event_name != 'workflow_run' ||
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write   # artifact 업로드 여유 권한

    env:
      TARGET: https://${{ secrets.DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare ZAP rules.tsv (tabs!)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .zap
          : > .zap/rules.tsv
          printf '10015\tWARN\tCache-Control tune when behind CDN\n' >> .zap/rules.tsv
          printf '10021\tWARN\tAdd X-Content-Type-Options nosniff\n' >> .zap/rules.tsv
          printf '10035\tWARN\tEnable HSTS after HTTPS stable\n' >> .zap/rules.tsv
          printf '10036\tWARN\tHide Server header via nginx\n' >> .zap/rules.tsv
          printf '10038\tWARN\tBaseline CSP then tighten\n' >> .zap/rules.tsv
          printf '10049\tWARN\tTune cacheability by route\n' >> .zap/rules.tsv
          printf '10063\tWARN\tAdd Permissions-Policy\n' >> .zap/rules.tsv
          printf '90004\tWARN\tSpectre isolation (COOP/CORP/COEP)\n' >> .zap/rules.tsv
          printf '90005\tIGNORE\tSec-Fetch-* are browser request headers\n' >> .zap/rules.tsv
          echo "---- .zap/rules.tsv (tabs shown as ^I) ----"
          cat -v .zap/rules.tsv

      - name: Loosen workspace perms (container write)
        run: sudo chmod -R a+rwX .

      - name: Wait until HTTPS is up
        shell: bash
        run: |
          set -euo pipefail
          for i in $(seq 1 24); do
            if curl -fsS -m 5 -o /dev/null "${TARGET}"; then
              echo "HTTPS OK"
              exit 0
            fi
            echo "...waiting HTTPS ($i/24)"; sleep 5
          done
          echo "ERROR: target is not ready" >&2
          exit 1

      - name: Run ZAP Baseline (docker)
        shell: bash
        run: |
          set -euo pipefail
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --rm --network=host \
            -v "$PWD":/zap/wrk \
            -e ZAP_AUTH_HEADER="${{ secrets.ZAP_AUTH_HEADER }}" \
            -e ZAP_AUTH_HEADER_VALUE="${{ secrets.ZAP_AUTH_HEADER_VALUE }}" \
            -e ZAP_AUTH_HEADER_SITE="${{ secrets.ZAP_AUTH_HEADER_SITE }}" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
              -t "${TARGET}" \
              -m 5 -a \
              -c .zap/rules.tsv \
              -J report_json.json \
              -w report_md.md \
              -r report_html.html

      - name: Append summary (Markdown)
        if: always()
        run: |
          {
            echo "## ZAP Baseline Report"
            echo
            sed -e 's/\r$//' report_md.md || true
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-${{ github.run_id }}
          path: |
            report_json.json
            report_md.md
            report_html.html
          retention-days: 14
